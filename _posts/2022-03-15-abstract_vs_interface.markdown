---
layout: post 
title:  "abstract VS interface"
date:   2022-03-15 12:05:21 +0800 
tags: 면접 자바 추상화
color: rgb(98,170,255)
subtitle: OOD 5대원칙
--- 

# 상속를 공부하면 따라오는 것 

객체 지향 프로그래밍(OOP)의 특성 중 하나인 `상속`은 상위 클라스의 기능을 하위 클라스 에서도 가능하도록 부여받는 것으로
확장성, 유연성, 재사용성의 기능을 높여준다.

상속을 공부한다면 `추상화`를 볼 수 있을 것이고 `인터페이스`를 공부하게 될 것이고
 `오버라이딩`, `오버로딩` 까지 같이 공부하게 된다.

나는 두 기초적인 지식에서 정리가 되지 않았고 이번 기회로 정리하고자 한다.

## 🚀 abstract

추상 클래스를 알기 전에 `추상화`에 대한 오해를 풀고 가자

### ☄ 추상화

JAVA에서 `추상화`는 특별한 용어는 아니다.

그저 국어 표현에서 말하는 `추상`은 `실체 간에 공통되는 특성을 추출한 것`으로 정리되는 할 수 있는데

개발자가 어떤 객체의 공통되는 특성을 뽑아내어 하나의 공통 객체로 만들어 내는 과정을 `추상화`라고 하는 것이다.

```java

class Dog {
    int age;
    int 
    
}

class Cat {
 int age;
 int

}

```
### ☄ 추상 클래스

이러한 추상화 과정에서 생겨난 클래스를 `추상 클래스` 라고 한다.

추상 클래스는 실체 클래스의 공통되는 필드와 메소드를 추출해서 만들어냈기 때문에 객체를 식접 호출(new())하는 것이 아닌
`extends` 를 사용하여 호출해야 한다.

### ☄ 추상 클래스는 구체적인 구현을 하지 않는다.

만일 고양이와 강아지의 요소를 추상화 `동물` 이라는 추상 클래스를 만들었다고 하면
`sound()`메소드를 어떻게 구현해야할까?

고양이과 강아지는 울음소리가 다르기 때문에 `추상 클래스`에서 구현을 해서는 않된다.

JAVA에서는 이를 알고 `추상 클래스`에서는 해당 클래스가 아닌 하위 클래스에서 구현하도록 제약을 걸었다.

**때문에 우리는 `추상 클래스`에서 메소드 만을 선언하고 실행 내용은 쓸 수 없는 것이다.**

### 목적

- 필드 및 메소드 이름 통일
- 시간 절약




## 🚀 명세서(interface)
    


## 🧾 Reference
- [깃헙 - 스프링 입문 교재](https://github.com/expert0226/oopinspring)
- [책 - 스프링을 입문을 위한 자바 객체 지향의 원리와 이해](https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=55641908)


