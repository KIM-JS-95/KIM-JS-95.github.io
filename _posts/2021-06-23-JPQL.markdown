---
layout: post
title:  "객체지향 쿼리 JPQL"
date:   2021-06-21 12:05:21 +0800
tags: JPA SPRING JPQL
color: rgb(154,133,255)
subtitle: 'JPQL'
--- 

##  객체지향 쿼리 JPQL

### SQL vs JPQL
* 테이블이 아닌 객체를 대상으로 검색하는 객체지향 쿼리
* <u>SQL을 추상화</u>해서 특정 DB SQL에 의존하지 않는다.

| 구분 | SQL | JPQL |
|:---:|:---:|:---:|
| 대상 | DATA | 객체 |
| 쿼리 형태 | DATA 중심의 쿼리 | 객체 중심의 쿼리 |

### JPQL ?
JPQL(Java Persistence Query Language)은 객체를 조회하는 객체지향 쿼리이다.
객체 중심의 문법인 만큼 특정 DB에 의존하지 않는다. 엔티티 조회, 묵시적 조인, 다형성 지원으로 SQL 보다 간결하다.
> 다형성(polymorphism) ?
> 
> 하나의 객체가 여러 가지 타입을 가질 수 있는 것을 의미합니다.
자바에서는 이러한 다형성을 부모 클래스 타입의 참조 변수로 자식 클래스 타입의 인스턴스를 참조할 수 있도록 하여 구현
>
>다형성은 상속, 추상화와 더불어 객체 지향 프로그래밍을 구성하는 중요한 특징 중 하나입니다.

### JPQL 쿼리와 SQL 쿼리 차이

#### JPQL

* select_문 = select_절 from_절 where_절 groupby_절 having_절 orderby_절

* update_문 = update_절 where_절

* delete_문  = delete_절 where_절

#### SQL

* SELECT m FROM Member AS m WHERE m.username = 'leveloper'


#### 차이점
1. 대소문자 구분

엔티티와 속성은 대소문자를 구분한다. 예를 들어, Member, username은 대소문자를 구분해줘야 한다. 반면에 SELECT, FROM, WHERE 같은 JPQL 키워드는 대소문자를 구분하지 않아도 된다.

2. 엔티티 이름

JPQL에서 사용한 Member는 클래스 명이 아니라 엔티티 명이다. 엔티티명은 @Entity(name="abc")로 지정할 수 있다. 엔티티 명을 지정하지 않으면 클래스 명을 기본값으로 사용한다.

3. 별칭은 필수

Member AS m을 보면 Member에 m이라는 별칭을 주었다. JPQL은 별칭을 필수로 사용해야 한다. AS를 생략해서 Member m처럼 사용해도 된다.

