---
layout: post
title:  "프로그래머스 SQL 고득점 KIT 문제"
date:   2021-09-08
tags: SQL, MYSQL, Programmers
color: rgb(154,133,255)
subtitle: '문제 풀이'
---

## 프로그래머스 SQL 문제 풀이

### SELECT

####

### SUM, MAX, MIN

### GROUP BY

#### 고양이와 개는 몇 마리 있을까?

<details>
<summary>문제 링크 및 답</summary>
<div markdown="1">

[고양이와 개는 몇 마리 있을까?](https://programmers.co.kr/learn/courses/30/lessons/59040)

핵심은 Group By와 COUNT() 명령어를 얼마나 잘 이해하였는 지에 대한 문제이다.

출력의 결과가 타입과, 타입별 동물의 마릿수 이므로  COUNT() 명령어를 추가적으로 입력해주고 

단, **동물 전체의 마리수(개+ 고양이)** 가 아닌 각 동물의 마릿수가 출력될 수 있도록 **group by 명령어**를 추가 입력해 주도록 한다.


```mysql-sql
SELECT ANIMAL_TYPE, count(ANIMAL_TYPE) 
from ANIMAL_INS 
group by ANIMAL_TYPE
order by ANIMAL_TYPE;
```

</div>
</details>

#### 동명 동물의 수 찾기

<details>
<summary>문제 링크 및 답</summary>
<div markdown="1">

[동명 동물의 수 찾기](https://programmers.co.kr/learn/courses/30/lessons/59041)

집계 함수 (SUM(), COUNT() ... )사용시에는 WHERE절을 사용할 수 없는 것을 꼭 알고 있어야한다.

집계함수 사용시 WHERE절과 같은 조건문을 사용하고 싶다면 HAVING 문을 사용해야 한다.

```mysql-sql
SELECT NAME, COUNT(NAME)
FROM ANIMAL_INS
GROUP BY NAME  
HAVING COUNT(NAME) >1
ORDER BY NAME;
```

</div>
</details>


#### 입양 시각 구하기(1)

<details>
<summary>문제 링크 및 답</summary>
<div markdown="1">

[입양 시각 구하기(1)](https://programmers.co.kr/learn/courses/30/lessons/59412)

가장 눈여겨 봐야할 문법은 시간을 관리하는 **HOUR 명령어** 일것이다. 동시에 시간과 시간 사이의 조건을 더해줄 AND 절까지 

작성하면 될것이다.


[날짜 관련 함수 모음](https://jang8584.tistory.com/7)
```mysql-sql
SELECT HOUR(DATETIME) AS 'HOUR', COUNT(HOUR(DATETIME)) AS 'COUNT'
FROM ANIMAL_OUTS
WHERE HOUR(DATETIME) >= 9 AND HOUR(DATETIME) <=19
GROUP BY HOUR(DATETIME)
ORDER BY HOUR(DATETIME)
```

</div>
</details>

#### 입양 시각 구하기(2)

<details>
<summary>문제 링크 및 답</summary>
<div markdown="1">

[입양 시각 구하기(2)](https://programmers.co.kr/learn/courses/30/lessons/59412)

테이플의 형태는 [입양 시각 구하기(1)](https://programmers.co.kr/learn/courses/30/lessons/59412)과 동일하나

다음 문제는 어느 시간이 가장 활발하게 이루어지는가에 대한 문제이다. 때문에 모든 시간 (00 ~ 24시)의 시간을 모두 구분하여 
확인해야한다.

우선 시간에 따른 테이블을 만들어준다. (답은 아래)

`@변수` 를 통해 시간 증가를 튜플의 크기만큼 시간을 부여한다.

(해당 테이블은 99개의 튜플로 이루어져 있기 때문에 `0 ~ 99` 까지 1씩 증가하는 튜플이 만들어진다.)

```mysql-sql
SET @hour := -1

SELECT (@hour := @hour + 1)
FROM ANIMAL_OUTS;
```

`@hour := @hour + 1`는 java에서 `변수++;` 와 동일하다.

1. 문제는 각 애트리 뷰트가 다른 성질을 가지고 있기때문에 별도으 `SELECT문`을 작성해 주어야 한다는 것이다.

HOUR에 대한 애트리뷰트를 작성은 어렵지 않다.
```mysql-sql
SET @hour := -1; -- 변수 선언

SELECT (@hour := @hour + 1) as HOUR
FROM ANIMAL_OUTS
WHERE @hour < 23
```

2. 다음은 동일 시간대의 등장 회수 이므로 COUNT() 함수를 작성해 주며 변수 `@hour` 은 프로세스가 종료되기 까지 1씩 증가되므로 

`WHERE절` 에 조건으로 사용해주면 동일 시간대의 갯수를 구할 수 있다.
```mysql-sql
SET @hour := -1; -- 변수 선언

SELECT COUNT(*) FROM ANIMAL_OUTS WHERE HOUR(DATETIME) = @hour as `COUNT`;

```

3. 마지막으로 두가지 쿼리를 합해주는 것으로 최종 쿼리가 완성이 되어진다.

```mysql-sql
SET @hour := -1; -- 변수 선언

SELECT (@hour := @hour + 1) as HOUR,
(SELECT COUNT(*) FROM ANIMAL_OUTS WHERE HOUR(DATETIME) = @hour) as COUNT
FROM ANIMAL_OUTS
WHERE @hour < 23
```

<추가>
MySQL에서 '=' 연산자는 두 가지 의미로 해석됨

우선 SET 문이나 UPDATE 문의 SET 절에서 사용되면, 왼쪽 피연산자에 오른쪽 피연산자를 대입하는 대입 연산자로 해석

SET 문이나 UPDATE 문의 SET 절 이외에서 사용되면, 왼쪽 피연산자와 오른쪽 피연산자를 비교하는 비교 연산자로 해석

</div>
</details>

### IS NULL

### JOIN

### String, Data