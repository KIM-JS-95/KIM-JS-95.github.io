---
layout: post 
title:  "디자인 패턴 - 프록시 패턴"
date:   2022-03-19 12:05:21 +0800 
tags: 면접 자바 디자인패턴
color: rgb(98,170,255)
subtitle: 스프링이 가지는 대표적인 디자인 패턴에 대해 알아보자
--- 

# 🚀 스프링에서 디자인 패턴의 중요성

`디자인 패턴`은 실제 개발 현장에서 비즈니스 요구 사항을 프로그래밍으로 처리하면서 만들어진 다양한 해결책 중에서 많은 사람들이
인정한 가장 효율적인 예시를 정리한 패턴의 집합이다.

## 🌠 프록시 패턴 - 개방 폐쇄 원칙(OCP), 의존 역전 원칙(DIP)

프록시는 대리자/ 대변인의 역할을 수행하는 존재를 말한다.

디자인 패턴에서의 **프록시는 서비스 메서드의 반환값에 가감하지 않는 것**이 특징이다. 다만, 제어의 흐름을 제어하거나 다른 로직을
수행하기 위해 사용하는 패턴이다.


### ☄ 프록시 패턴 - 전

![004](https://user-images.githubusercontent.com/65659478/159110346-f2fba44a-7a4b-43a8-8bf8-cf36160917b7.jpg)


```java
public class Service implements IService {
    public String runSomething() {
        return "서비스 짱!!!";
    }
}

public class ClientWithNoProxy {
    public static void main(String[] args) {
        // 프록시를 이용하지 않은 호출
        Service service = new Service();
        System.out.println(service.runSomething());
    }
}
```

### ☄ 프록시 패턴 - 후


![005](https://user-images.githubusercontent.com/65659478/159110347-1188710a-e9cf-44a3-9e15-22d0fe31487d.jpg)

![006](https://user-images.githubusercontent.com/65659478/159110348-a97ddbf7-aa5f-49b9-83fe-ee5edfdc59b1.jpg)

```java

public interface IService {
    String runSomething();
}

public class Service implements IService {
    public String runSomething() {
        return "서비스 짱!!!";
    }
}

public class Proxy implements IService {
    IService service1;

    public String runSomething() {
        System.out.println("호출에 대한 흐름 제어가 주목적, 반환 결과를 그대로 전달");

        service1 = new Service();
        return service1.runSomething();
    }
}

public class ClientWithProxy {
    public static void main(String[] args) {
        // 프록시를 이용한 호출
        IService proxy = new Proxy();
        System.out.println(proxy.runSomething());
    }
}
```



### 🌠 정리

> 제어 흐름을 조정하기 위한 목적으로 중간에 대리자를 두는 패턴

- 대리자는 실제 서비스와 같은 이름의 메서드를 `인터페이스`를 통해 구현한다.
- 대리자는 실제 서비스에 대한 참조 변수를 갖는다.(합성)
- 대리자는 실제 서비스의 같은 이름을 가진 메서드를 호출하고, 그 값을 클라이언트에게 돌려준다.
- 대리자는 실제 서비스의 메소드 호출 전후에 별도의 로직을 수행할 수도 있다.

```
![007](https://user-images.githubusercontent.com/65659478/159110349-6df3a0be-838b-40c4-b4c6-20a82e71bdef.jpg)
![008](https://user-images.githubusercontent.com/65659478/159110351-b2b2daa1-f6d2-4a4e-9de9-9097beeaa76b.jpg)
![009](https://user-images.githubusercontent.com/65659478/159110353-422bd362-3c74-4545-a92f-aba8234737ab.jpg)
![010](https://user-images.githubusercontent.com/65659478/159110354-2467aee5-fc8d-4aa7-a82c-0548cd40796f.jpg)
![011](https://user-images.githubusercontent.com/65659478/159110355-237bea74-c91f-40ef-a31a-dc89df4b633e.jpg)
![012](https://user-images.githubusercontent.com/65659478/159110356-253d56ab-7a03-4150-ae3c-729f57711f67.jpg)
![013](https://user-images.githubusercontent.com/65659478/159110357-ee670925-344e-4ed9-8277-9c795c24d7b2.jpg)
![014](https://user-images.githubusercontent.com/65659478/159110358-2bf2894d-e2ed-4224-9afa-bbbfa764c327.jpg)

```

## 🧾 Reference
- [깃헙 - 스프링 입문 교재](https://github.com/expert0226/oopinspring)
- [책 - 스프링을 입문을 위한 자바 객체 지향의 원리와 이해](https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=55641908)


